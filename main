#ifndef MACHINE_H
#define MACHINE_H

#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <algorithm>
#include <regex>

using namespace std;

class Memory {
public:
    string mem[256]{"00"};
    void setcell(int address, string value);
    string getcell(int address) const;
};

class Register {
public:
    int reg;
    Register();
    void setter(int id1, int id2);
    int getter(int idx) const;
    void set_val_to_mem(Memory &m, int address);
};

class ALU : public Register {
public:
    Register r;
    string hex_to_dec(string &s);
    string dec_to_hex(string &s);
    string dec_to_hex(float val);
    bool valid(string &s);
    void add(int idx1, int idx2, int idx3, Register &reg);
    void add_floats(int idx1, int idx2, int idx3, Register &reg);
    string float_to_hex(int idx1, int idx2, int idx3, Register &reg);
};

class Screen {
public:
    void displayOutput(const string &output);
};

class CU {
public:
    void loadFromMemory(int idxReg, int idxMem, Register &reg, Memory &memory);
    void loadImmediate(int idxReg, int val, Register &reg);
    void store(int idxReg, int idxMem, Register &reg, Memory &memory);
    void move(int idxReg1, int idxReg2, Register &reg);
    void jumpIfEqual(int idxReg, int address, Register &reg, int &programCounter);
    void halt();
    vector<int> decode(const string &instr);
};

class CPU {
private:
    Register reg;
    ALU alu;
    CU cu;
    int programCounter;
    string instructionRegister;

public:
    CPU();
    void fetchNextInstruction(Memory &memory);
    bool executeInstruction(class Machine &machine);
    void displayState() const;
    Register &getRegister();
    int getProgramCounter() const;
    void setProgramCounter(int value);
};

class Machine {
private:
    CPU processor;
    Memory memory;
    Screen screen;

public:
    Machine();
    void loadProgramFile(const string &filePath);
    void outputState() const;
    void startSimulation();
    Memory &getMemory();
    CPU &getCPU();
    Screen &getScreen();
};

class MainUI {
private:
    Machine &machine;

public:
    MainUI(Machine &machineRef);
    void DisplayMenu() const;
    string inputInstruction();
    char inputChoice();
};

#endif // MACHINE_H

